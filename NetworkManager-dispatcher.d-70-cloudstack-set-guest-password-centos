#!/bin/bash
#
# cloudstack-set-guest-password   NetworkManager dispatcher script for Password Download Client
#
# description: NetworkManager dispatcher script for Password Download Client
#
# usage:
#    # install cloudstack-scripts/NetworkManager-dispatcher.d-70-cloudstack-set-guest-password-centos /etc/NetworkManager/dispatcher.d/70-cloudstack-set-guest-password
#

prog=$(basename $0)

# specify the username to update password (default is root)
user=root

# Enable update hostname action (default is 1)
update_hostname_action=1

# Enable debug log (default is 5) 
loglevel=5

# Edit cloudstack-set-guest-password, when modify above settings
if [ -f /etc/default/cloudstack-set-guest-password ]; then
    . /etc/default/cloudstack-set-guest-password
fi

function log_debug() {
    [ $loglevel -ge 7 ] && echo "$prog: $@"
}

function log_info() {
    [ $loglevel -ge 6 ] && echo "$prog: $@"
}

function log_notice() {
    [ $loglevel -ge 5 ] && echo "$prog: $@"
}

function log_error() {
    [ $loglevel -ge 3 ] && echo "$prog: $@"
}

function cloudstack_set_guest_password() {
    # find dhcp lease file
    interface=$1
    connection_uuid=$2
    dhcp_dirs=$(ls -d /var/lib/dhclient /var/lib/dhcp /var/lib/NetworkManager 2>/dev/null)
    filename="dhclient-${connection_uuid}-${interface}.lease"
    dhcp_files=$(find $dhcp_dirs -name $filename)
    if [ -z "$dhcp_files" ]; then
        log_info "Cloud not find $filename"
        return 0
    fi
    DHCP_FILE=$(ls -t $dhcp_files|head -1)

    # find password server ip
    PASSWORD_SERVER_IP=$(grep dhcp-server-identifier $DHCP_FILE | tail -1 | awk '{print $NF}' | tr -d '\;')
    if [ -z "${PASSWORD_SERVER_IP}" ]; then
        log_error "Could not find password server IP in $DHCP_FILE"
	return 1
    fi

    # request new password
    log_debug "Found password server IP $PASSWORD_SERVER_IP in $DHCP_FILE"
    log_debug "Sending request to password server at $PASSWORD_SERVER_IP"
    password=$(curl --noproxy '*' -s --retry 3 -m 20 -H "DomU_Request: send_my_password" $PASSWORD_SERVER_IP:8080)
    if [ $? -ne 0 ]; then
	log_error "Failed to send request to password server at $PASSWORD_SERVER_IP"
	return 1
    fi

    # check password string
    password_received=0
    error_occured=0
    password=$(echo $password | tr -d '\r')
    log_debug "Got response from server at $PASSWORD_SERVER_IP"
    case "$password" in
        "")
            log_info "Password server at $PASSWORD_SERVER_IP did not have any password for the VM"
            password_received=0
            ;;
                    
        "bad_request")
            log_info "VM sent an invalid request to password server at $PASSWORD_SERVER_IP"
            error_occured=1
            ;;
                                        
        "saved_password")
            log_info "VM has already saved a password from the password server at $PASSWORD_SERVER_IP"
            password_received=0
            ;;
                                        
        *)
            log_info "VM got a valid password from server at $PASSWORD_SERVER_IP"
            password_received=1
            ;;
    esac
    if [ $error_occured -eq 1 ]; then
        log_error "Failed to get password from server"
        return 1
    fi
    if [ $password_received -eq 0 ]; then
        log_info "Did not need to change password."
        return 0
    fi

    # change password
    log_info "Changing password ..."
    echo $password | passwd --stdin $user > /dev/null
    if [ $? -ne 0 ]; then
        log_error "Failed to change password for user $user"
	return 1
    fi
    log_notice "Successfully changed password for user $user"

    # send ack to password server
    log_debug "Sending acknowledgment to password server at $PASSWORD_SERVER_IP"
    curl --noproxy '*' -s --retry 3 -m 20 -o /dev/null -H "DomU_Request: saved_password" $PASSWORD_SERVER_IP:8080
    if [ $? -ne 0 ]; then
        log_error "Failed to send ack to password server at $PASSWORD_SERVER_IP"
	return 1
    fi

    log_info "Successfully sending acknowledgment to password server"
    return 0
}

function rsyslog_update_hostname() {
    systemctl reload-or-restart rsyslog.service
    if [ $? -ne 0 ]; then
        log_error "Failed to restart rsyslog.service caused by update hostname"
	return 1
    else
        log_notice "Successfully restart rsyslog.service caused by update hostname"
        return 0
    fi
}

function getty_update_hostname() {
    getty_serv=$(systemctl list-units --state=running|grep getty|grep service|awk '{print $1}')
    if [ -z "$getty_serv" ]; then
        log_error "Cannot found getty@ttyN.service"
        return 1
    fi
    systemctl reload-or-restart $getty_serv
    if [ $? -ne 0 ]; then
        log_error "Failed to restart $getty_serv caused by update hostname"
        return 1
    else
        log_notice "Successfully restart $getty_serv caused by update hostname"
        return 0
    fi
}

interface=$1
action=$2

case "$action" in
    up)
	cloudstack_set_guest_password ${interface} ${CONNECTION_UUID}
	if [ $? -ne 0 ]; then
	    exit 1
        fi
	;;

    hostname)
        if [ $update_hostname_action -eq 1 ]; then
            rsyslog_update_hostname
            getty_update_hostname
        fi
        ;;

esac

